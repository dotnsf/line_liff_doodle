<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="UTF-8"/>
<title>いらいん</title>
<script type="text/javascript" src="//code.jquery.com/jquery-2.2.4.min.js"></script>
<link href="//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet"/>
<script src="//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
<script src="https://d.line-scdn.net/liff/1.0/sdk.js"></script>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<meta name="apple-mobile-web-app-capable" content="yes"/>

<style type="text/css">
html, body{
  text-align: center;
  background-color: #fafafa;
  font-size: 20px;
  color: #333;
}
#mycanvas{
  border: 1px solid #333;
}
</style>
</head>
<body>
<select id="select_color" name="select_color">
  <option style="color:black;" value="black" selected="selected">黒</option>
  <option style="color:lightgray;" value="white">白</option>
  <option style="color:red;" value="red">赤</option>
  <option style="color:blue;" value="blue">青</option>
  <option style="color:green;" value="green">緑</option>
  <option style="color:yellow;" value="yellow">黄</option>
  <option style="color:cyan;" value="cyan">空</option>
  <option style="color:magenta;" value="magenta">紫</option>
  <option style="color:gray;" value="gray">灰</option>
  <option style="color:#ef8f9c;" value="#ef8f9c">ピンク</option>
  <option style="color:#ead2ad;" value="#ead2ad">肌</option>
  <option style="color:#7c6035;" value="#7c6035">茶</option>
</select>

<select id="select_linewidth" name="select_linewidth">
  <option value="1">1</option>
  <option value="2">2</option>
  <option value="3">3</option>
  <option value="4">4</option>
  <option value="5" selected="selected">5</option>
  <option value="6">6</option>
  <option value="7">7</option>
  <option value="8">8</option>
  <option value="9">9</option>
  <option value="10">10</option>
</select>

<div id="canvas_div">
  <canvas width="80%" height="50%" id="mycanvas">
  </canvas>

  <br/>
  <input type="button" class="btn btn-xs btn-warning" value="reset" onClick="resetCanvas();"/>
  <input type="button" class="btn btn-xs btn-primary" value="post" onClick="post();"/>
</div>

<script>
var base_url = '<%= base_url %>';

//. 参考: https://gist.github.com/Cartman0/436459b9b85cfdd1ca9c
$(function(){
  liff.init(
    data => {
      liff.getProfile()
        .then( profile => {
        }).catch( err => {
        });
    },
    err => {
      //alert( JSON.stringify( err, null, 2 ) );
    }
  );

  var canvas = document.getElementById( 'mycanvas' );
  if( !canvas || !canvas.getContext ){
    return false;
  }
  var ctx = canvas.getContext( '2d' );
  //. マウスの座標を取得
  var mouse = {
    startX: 0,
    startY: 0,
    x: 0,
    y: 0,
    color: "black",
    isDrawing: false
  };
  var borderWidth = 1;
  canvas.addEventListener( "mousemove", function( e ){
    //. マウスが動いたら座標値を取得
    var rect = e.target.getBoundingClientRect();
    mouse.x = e.clientX - rect.left - borderWidth;
    mouse.y = e.clientY - rect.top - borderWidth;

    //. isDrawがtrueのとき描画
    if( mouse.isDrawing ){
      ctx.beginPath();
      ctx.lineWidth = parseInt( $('#select_linewidth').val() );
      ctx.moveTo( mouse.startX, mouse.startY );
      ctx.lineTo( mouse.x, mouse.y );
      ctx.strokeStyle = $('#select_color').val(); //mouse.color;
      ctx.stroke();
      mouse.startX = mouse.x;
      mouse.startY = mouse.y;
    }
  });
  //. マウスを押したら、描画OK(myDrawをtrue)
  canvas.addEventListener( "mousedown", function( e ){
    mouse.isDrawing = true;
    mouse.startX = mouse.x;
    mouse.startY = mouse.y;
  });
  //. マウスを上げたら、描画禁止(myDrawをfalse)
  canvas.addEventListener( "mouseup", function( e ){
    mouse.isDrawing = false;
  });
  canvas.addEventListener( 'mouseleave', function( e ){
    mouse.isDrawing = false;
  });

  canvas.addEventListener( "touchmove", function( e ){
    //. タッチが動いたら座標値を取得
    var t = e.changedTouches[0];
    var rect = e.target.getBoundingClientRect();
    mouse.x = ( isAndroid() ? t.pageX : e.pageX ) - rect.left - borderWidth;
    mouse.y = ( isAndroid() ? t.pageY : e.pageY ) - rect.top - borderWidth;

    //. isDrawがtrueのとき描画
    if( mouse.isDrawing ){
      ctx.beginPath();
      ctx.lineWidth = parseInt( $('#select_linewidth').val() );
      ctx.moveTo( mouse.startX, mouse.startY );
      ctx.lineTo( mouse.x, mouse.y );
      ctx.strokeStyle = $('#select_color').val(); //mouse.color;
      ctx.stroke();
      mouse.startX = mouse.x;
      mouse.startY = mouse.y;
    }
  });
  //. タッチしたら、描画OK(myDrawをtrue)
  canvas.addEventListener( "touchstart", function( e ){
    var t = e.changedTouches[0];
    var rect = t.target.getBoundingClientRect();
    mouse.isDrawing = true;
    mouse.startX = t.pageX - rect.left - borderWidth;
    mouse.startY = t.pageY - rect.top - borderWidth;
  });
  //. タッチを上げたら、描画禁止(myDrawをfalse)
  canvas.addEventListener( "touchend", function( e ){
    mouse.isDrawing = false;
  });
  canvas.addEventListener( 'touchcancel', function( e ){
    mouse.isDrawing = false;
  });

  $('#select_color').change( function(){
    var color = $(this).val();
    if( color == 'white' ){
      color = 'lightgray';
    }
    $(this).css( { 'color': color } );
    $('#select_linewidth').css( { 'color': color } );
  });

  //. リサイズ時に Canvas サイズを変更する
  $(window).on( 'load resize', function(){
    resized();
  });

  //. スクロール禁止
  /*
  $(window).on('touchmove.noScroll', function( e ){
    e.preventDefault();
  });
  */
  var movefun = function( event ){
    event.preventDefault();
  }
  window.addEventListener( 'touchmove', movefun, { passive: false } );

  resetCanvas();
});

function resized(){
  var browserWidth = window.innerWidth;
  var browserHeight = window.innerHeight;
  var canvas = document.getElementById( 'mycanvas' );
  if( canvas && canvas.getContext ){
    canvas.width = browserWidth * 0.8;
    canvas.height = browserHeight * 0.8;
  }
}

function resetCanvas(){
  var canvas = document.getElementById( 'mycanvas' );
  if( !canvas || !canvas.getContext ){
    return false;
  }
  var ctx = canvas.getContext( '2d' );

  //. 全体を白でベタ塗り
  ctx.beginPath();
  ctx.fillStyle = "rgb( 255, 255, 255 )";
  ctx.fillRect( 0, 0, canvas.width, canvas.height );
  ctx.stroke();
}

function isAndroid(){
  return ( navigator.userAgent.indexOf( 'Android' ) > 0 );
}

function post(){
  var canvas = document.getElementById( 'mycanvas' );
  if( !canvas || !canvas.getContext ){
    return false;
  }
  var ctx = canvas.getContext( '2d' );

  //. 画像データ
  var png = canvas.toDataURL( 'image/png' );
  png = png.replace( /^.*,/, '' );

  //. バイナリ変換
  var bin = atob( png );
  var buffer = new Uint8Array( bin.length );
  for( var i = 0; i < bin.length; i ++ ){
    buffer[i] = bin.charCodeAt( i );
  }
  var blob = new Blob( [buffer.buffer], {
    type: 'image/png'
  });

  //. フォームにして送信
  console.log( 'Sending data... : ' + blob.size );
  var formData = new FormData();
  formData.append( 'image', blob );    //. <form enctype='multipart/formdata'><input name='image' type='file'/> ...
  $.ajax({
    type: 'POST',
    url: '/image',
    data: formData,
    contentType: false,
    processData: false,
    success: function( result, dataType ){
      //alert( result );
      //result = JSON.parse( result );
      console.log( result );
      if( result.id ){
        //. https://developers.line.biz/ja/reference/messaging-api/#image-message
        var img_url = base_url + 'image?id=' + result.id;
        var img_url0 = img_url + '&att=thumbnail';

        var data = {
          type: "image",
          originalContentUrl: img_url,
          previewImageUrl: img_url0
        };
        //alert( JSON.stringify( data, null, 2 ) );

        liff.sendMessages([
          data
        ]).then( () => {
          console.log( 'message sent' );
          liff.closeWindow();
        }).catch( ( err ) => {
          console.log( 'error', err );
          //alert( JSON.stringify( err, null, 2 ) );
        });
      }
    },
    error: function( jqXHR, textStatus, errorThrown ){
      console.log( textStatus + ': ' + errorThrown );
    }
  });
}
</script>
</body>
</html>
