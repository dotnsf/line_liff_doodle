<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="UTF-8"/>
<title>お絵描きスタンプ</title>
<script type="text/javascript" src="//code.jquery.com/jquery-2.2.4.min.js"></script>
<link href="//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet"/>
<script src="//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
<link href="//use.fontawesome.com/releases/v5.8.1/css/all.css" rel="stylesheet"/>
<script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.js"></script>
<link type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.css" rel="stylesheet" media="screen"/>
<link type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick-theme.css" rel="stylesheet" media="screen"/>
<script src="https://static.line-scdn.net/liff/edge/2.1/sdk.js"></script>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<meta name="apple-mobile-web-app-capable" content="yes"/>

<style type="text/css">
html, body{
  text-align: center;
  background-color: #fafafa;
  font-size: 20px;
  color: #333;
}
#mycanvas{
  border: 1px solid #333;
}

.slick-slide{
  position: relative;
}
.slick-slide .caption{
  position: absolute;
  left: 0;
  z-index: 2;
  width: calc(100% - 40px);
  padding: 20px;
  color: #003;
  font-size: 14px;
  opacity: 1;
  transition: .3s ease;
}
</style>
</head>
<body>
<select id="select_color" name="select_color">
  <option style="color:black;" value="transparent">透明</option>
  <option style="color:black;" value="black" selected="selected">黒</option>
  <option style="color:lightgray;" value="white">白</option>
  <option style="color:red;" value="red">赤</option>
  <option style="color:blue;" value="blue">青</option>
  <option style="color:green;" value="green">緑</option>
  <option style="color:yellow;" value="yellow">黄</option>
  <option style="color:#FFA500;" value="#FFA500">橙</option>
  <option style="color:cyan;" value="cyan">空</option>
  <option style="color:magenta;" value="magenta">紫</option>
  <option style="color:gray;" value="gray">灰</option>
  <option style="color:#ef8f9c;" value="#ef8f9c">ピンク</option>
  <option style="color:#ead2ad;" value="#ead2ad">肌</option>
  <option style="color:#7c6035;" value="#7c6035">茶</option>
</select>

<select id="select_linewidth" name="select_linewidth">
  <option value="1">1</option>
  <option value="2">2</option>
  <option value="3">3</option>
  <option value="4">4</option>
  <option value="5" selected="selected">5</option>
  <option value="6">6</option>
  <option value="7">7</option>
  <option value="8">8</option>
  <option value="9">9</option>
  <option value="10">10</option>
  <option value="11">11</option>
  <option value="12">12</option>
  <option value="13">13</option>
  <option value="14">14</option>
  <option value="15">15</option>
</select>

<input type="button" class="btn btn-xs btn-secondary p-0" id="setbg_btn" value="背景色" onClick="setBG();"/>
<!--
<a href="#" class="btn btn-xs btn-success p-0" data-toggle="modal" data-target="#historyModal" id="history_btn"><i class="fas fa-grip-horizontal"></i></a>
-->

<div id="canvas_div">
  <div id="cdiv"></div>

  <br/>
  <input type="button" class="btn btn-xs" id="undo_btn" value="<" onClick="undo();" disabled="disabled"/>
  <input type="button" class="btn btn-xs btn-warning" value="リセット" onClick="resetCanvas();"/>
  <input type="button" class="btn btn-xs btn-primary" value="送信" onClick="post();"/>
  <input type="button" class="btn btn-xs" id="redo_btn" value=">" onClick="redo();" disabled="disabled"/>
</div>

<div class="modal bd-example-modal-lg fade" id="historyModal" tabindex="-1" role="dialog" aria-labelledby="historyModal" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title" id="historyModalLabel">履歴</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body" id="historymodal-body">
        <div id="mycarousel" class="slick-box">
        </div>
      </div>
    </div>
  </div>
</div>

<script>
var base_url = location.origin + '/';
//console.log( base_url );
var userId = null;
var name = null;
var picurl = null;

var undos = [];
var redos = [];
var stroke = null; //. { color: color, width: width, xys: [] }
var backgroundcolor = null;

//. 参考: https://gist.github.com/Cartman0/436459b9b85cfdd1ca9c
$(function(){
  //. 参考: https://liff-stp.herokuapp.com/
  liff.init( { liffId: '<%= liff_id %>' } ).then( function(){
    if( !liff.isInClient() ){
      if( !liff.isLoggedIn() ){
        liff.login({
          redirectUri: base_url
        });
      }
    }

    liff.getProfile().then( profile => {
      userId = profile.userId;

      $.ajax({
        type: 'GET',
        url: '/images_by_userId/' + userId,
        success: function( result ){
          if( result && result.status && result.images.length > 0 ){
            var figures = '';
            for( var i = result.images.length - 1; i >= 0; i -- ){
              var image_url = 'image?id=' + result.images[i]._id;
              var figure = '<figure>'
                + '<a href="#" onClick="imgClick(\'' + image_url + '\');">'
                + '<img src="/' + image_url + '&att=thumbnail" width="100%"/>'
                + '</a>'
                + '</figure>';
              figures += figure;
            }

            $('#mycarousel').html( '<div id="mycarousel-inner"></div>' );
            $('#mycarousel-inner').html( figures );
            $('#mycarousel-inner').slick({
              arrows: true,
              autoplay: false,
              infinite: false,
              initialSlide: 0,
              slidesToShow: 1,
              slidesToScroll: 1
            });
          }
        },
        error: function( err ){
          alert( JSON.stringify( err ) );
        }
      });
    }).catch( err => {
      //alert( JSON.stringify( err ) );
      console.log( "getProfile(): " + JSON.stringify( err ) );
    });
  }).catch( err => {
    //alert( JSON.stringify( err ) );
    console.log( "init(): " + JSON.stringify( err ) );
  });

  init();
});

function init(){
  $('#cdiv').html( '<canvas width="80%" height="50%" id="mycanvas"></canvas>' );

  var canvas = document.getElementById( 'mycanvas' );
  if( !canvas || !canvas.getContext ){
    return false;
  }
  var ctx = canvas.getContext( '2d' );
  //. マウスの座標を取得
  var mouse = {
    startX: 0,
    startY: 0,
    x: 0,
    y: 0,
    color: "black",
    isDrawing: false
  };
  var borderWidth = 1;
  canvas.addEventListener( "mousemove", function( e ){
    //. マウスが動いたら座標値を取得
    var rect = e.target.getBoundingClientRect();
    mouse.x = e.clientX - rect.left - borderWidth;
    mouse.y = e.clientY - rect.top - borderWidth;

    //. isDrawがtrueのとき描画
    if( mouse.isDrawing ){
      var color = $('#select_color').val();
      if( color == 'transparent' ){
        ctx.globalCompositeOperation = 'destination-out';
      }else{
        ctx.globalCompositeOperation = 'source-over';
      }

      ctx.beginPath();
      ctx.lineWidth = parseInt( $('#select_linewidth').val() );
      ctx.lineCap = 'round';
      ctx.moveTo( mouse.startX, mouse.startY );
      ctx.lineTo( mouse.x, mouse.y );
      if( color != 'transparent' ){
        ctx.strokeStyle = color;
      }
      ctx.stroke();
      mouse.startX = mouse.x;
      mouse.startY = mouse.y;

      if( stroke ){
        stroke.xys.push( [ mouse.x, mouse.y ] );
      }
    }
  });
  //. マウスを押したら、描画OK(myDrawをtrue)
  canvas.addEventListener( "mousedown", function( e ){
    mouse.isDrawing = true;
    mouse.startX = mouse.x;
    mouse.startY = mouse.y;

    stroke = {};
    stroke.color = $('#select_color').val();
    stroke.width = parseInt( $('#select_linewidth').val() );
    stroke.xys = [ [ mouse.x, mouse.y ] ];
  });
  //. マウスを上げたら、描画禁止(myDrawをfalse)
  canvas.addEventListener( "mouseup", function( e ){
    mouse.isDrawing = false;

    if( stroke ){
      undos.push( stroke );
      $('#undo_btn').prop( 'disabled', false );
      stroke = null;
      redos = [];
      $('#redo_btn').prop( 'disabled', true );
    }
  });
  canvas.addEventListener( 'mouseleave', function( e ){
    mouse.isDrawing = false;

    if( stroke ){
      undos.push( stroke );
      $('#undo_btn').prop( 'disabled', false );
      stroke = null;
      redos = [];
      $('#redo_btn').prop( 'disabled', true );
    }
  });

  canvas.addEventListener( "touchmove", function( e ){
    //. タッチが動いたら座標値を取得
    var t = e.changedTouches[0];
    var rect = e.target.getBoundingClientRect();
    //mouse.x = e.pageX - rect.left - borderWidth;
    //mouse.y = e.pageY - rect.top - borderWidth;
    mouse.x = ( isAndroid() ? t.pageX : e.pageX ) - rect.left - borderWidth;
    mouse.y = ( isAndroid() ? t.pageY : e.pageY ) - rect.top - borderWidth;

    //. isDrawがtrueのとき描画
    if( mouse.isDrawing ){
      var color = $('#select_color').val();
      if( color == 'transparent' ){
        ctx.globalCompositeOperation = 'destination-out';
      }else{
        ctx.globalCompositeOperation = 'source-over';
      }

      ctx.beginPath();
      ctx.lineWidth = parseInt( $('#select_linewidth').val() );
      ctx.lineCap = 'round';
      ctx.moveTo( mouse.startX, mouse.startY );
      ctx.lineTo( mouse.x, mouse.y );
      if( color != 'transparent' ){
        ctx.strokeStyle = color;
      }
      ctx.stroke();
      mouse.startX = mouse.x;
      mouse.startY = mouse.y;

      if( stroke ){
        stroke.xys.push( [ mouse.x, mouse.y ] );
      }
    }
  });
  //. タッチしたら、描画OK(myDrawをtrue)
  canvas.addEventListener( "touchstart", function( e ){
    var t = e.changedTouches[0];
    var rect = t.target.getBoundingClientRect();
    mouse.isDrawing = true;
    mouse.startX = t.pageX - rect.left - borderWidth;
    mouse.startY = t.pageY - rect.top - borderWidth;

    stroke = {};
    stroke.color = $('#select_color').val();
    stroke.width = parseInt( $('#select_linewidth').val() );
    stroke.xys = [ [ mouse.startX, mouse.startY ] ];
  });
  //. タッチを上げたら、描画禁止(myDrawをfalse)
  canvas.addEventListener( "touchend", function( e ){
    mouse.isDrawing = false;

    if( stroke ){
      undos.push( stroke );
      $('#undo_btn').prop( 'disabled', false );
      stroke = null;
      redos = [];
      $('#redo_btn').prop( 'disabled', true );
    }
  });
  canvas.addEventListener( 'touchcancel', function( e ){
    mouse.isDrawing = false;

    if( stroke ){
      undos.push( stroke );
      $('#undo_btn').prop( 'disabled', false );
      stroke = null;
      redos = [];
      $('#redo_btn').prop( 'disabled', true );
    }
  });

  $('#select_color').change( function(){
    var color = $(this).val();
    if( color == 'white' ){
      color = 'lightgray';
    }else if( color == 'transparent' ){
      color = 'black';
    }
    $(this).css( { 'color': color } );
    $('#select_linewidth').css( { 'color': color } );
    $('#setbg_btn').css( { 'background': color } );
  });

  //. リサイズ時に Canvas サイズを変更する
  $(window).on( 'load resize', function(){
    resized();
  });

  //. スクロール禁止
  /*
  $(window).on('touchmove.noScroll', function( e ){
    e.preventDefault();
  });
  */
  var movefun = function( event ){
    event.preventDefault();
  }
  window.addEventListener( 'touchmove', movefun, { passive: false } );
}

function resized(){
  var browserWidth = window.innerWidth;
  var browserHeight = window.innerHeight;
  var canvas = document.getElementById( 'mycanvas' );
  if( canvas && canvas.getContext ){
    canvas.width = browserWidth * 0.8;
    canvas.height = browserHeight * 0.6;
  }
}

function resetCanvas( no_reset_unredo ){
  init();
  resized();

  if( !no_reset_unredo ){
    undos = [];
    redos = [];
    backgroundcolor = null;
  }
}

function isAndroid(){
  return ( navigator.userAgent.indexOf( 'Android' ) > 0 );
}

function post(){
  var canvas = document.getElementById( 'mycanvas' );
  if( !canvas || !canvas.getContext ){
    return false;
  }
  var ctx = canvas.getContext( '2d' );

  //. 画像データ
  var png = canvas.toDataURL( 'image/png' );
  png = png.replace( /^.*,/, '' );

  //. バイナリ変換
  var bin = atob( png );
  var buffer = new Uint8Array( bin.length );
  for( var i = 0; i < bin.length; i ++ ){
    buffer[i] = bin.charCodeAt( i );
  }
  var blob = new Blob( [buffer.buffer], {
    type: 'image/png'
  });

  //. フォームにして送信
  console.log( 'Sending data... : ' + blob.size );
  var formData = new FormData();
  formData.append( 'image', blob );    //. <form enctype='multipart/formdata'><input name='image' type='file'/> ...
  formData.append( 'userId', userId );
  $.ajax({
    type: 'POST',
    url: '/image',
    data: formData,
    contentType: false,
    processData: false,
    success: function( result, dataType ){
      if( result.id ){
        //. https://developers.line.biz/ja/reference/messaging-api/#image-message
        var img_url = base_url + 'image?id=' + result.id;
        var img_url0 = img_url + '&att=thumbnail';

        var data = {
          type: "image",
          originalContentUrl: img_url,
          previewImageUrl: img_url0
        };

        if( liff.isInClient() ){
          //. Use sendMessages()
          liff.sendMessages([
            data
          ]).then( () => {
            console.log( 'message sent' );
            liff.closeWindow();
          }).catch( ( err ) => {
            console.log( 'error', err );
            alert( JSON.stringify( err, null, 2 ) );
          });
        }else{
          liff.shareTargetPicker([
            data
          ]).then( () => {
            console.log( 'message sent' );
            //liff.closeWindow();
          }).catch( ( err ) => {
            console.log( 'error', err );
            alert( JSON.stringify( err, null, 2 ) );
          });
        }
      }
    },
    error: function( jqXHR, textStatus, errorThrown ){
      alert( textStatus + ': ' + errorThrown );
      console.log( textStatus + ': ' + errorThrown );
    }
  });
}

function undo(){
  if( undos && undos.length > 0 ){
    var last_stroke = undos.pop();
    if( undos.length == 0 ){
      $('#undo_btn').prop( 'disabled', true );
    }
    redos.push( last_stroke );
    $('#redo_btn').prop( 'disabled', false );

    redrawCanvas();
  }
}

function redo(){
  if( redos && redos.length > 0 ){
    var last_stroke = redos.pop();
    if( redos.length == 0 ){
      $('#redo_btn').prop( 'display', true );
    }
    undos.push( last_stroke );
    $('#undo_btn').prop( 'display', false );

    redrawCanvas();
  }
}

function setBG(){
  var color = $('#select_color').val();
  if( color ){
    if( color != 'transparent' ){
      backgroundcolor = color;
    }else{
      backgroundcolor = null;
    }
    redrawCanvas();
  }
}

function redrawCanvas(){
  if( undos && undos.length >= 0 ){
    resetCanvas( true );

    if( backgroundcolor ){
      var canvas = document.getElementById( 'mycanvas' );
      if( !canvas || !canvas.getContext ){
        return false;
      }
      var ctx = canvas.getContext( '2d' );

      //. 全体をベタ塗り
      ctx.beginPath();
      ctx.fillStyle = backgroundcolor; //"rgb( 255, 255, 255 )";
      ctx.fillRect( 0, 0, canvas.width, canvas.height );
      ctx.stroke();
    }

    for( var i = 0; i < undos.length; i ++ ){
      var stroke = undos[i];

      for( var j = 1; j < stroke.xys.length; j ++ ){
        var canvas = document.getElementById( 'mycanvas' );
        if( !canvas || !canvas.getContext ){
          return false;
        }
        var ctx = canvas.getContext( '2d' );

        var color = stroke.color;
        if( color == 'transparent' ){
          ctx.globalCompositeOperation = 'destination-out';
        }else{
          ctx.globalCompositeOperation = 'source-over';
        }

        ctx.beginPath();
        ctx.lineWidth = stroke.width;
        ctx.lineCap = 'round';
        ctx.moveTo( stroke.xys[j-1][0], stroke.xys[j-1][1] );
        ctx.lineTo( stroke.xys[j][0], stroke.xys[j][1] );
        if( color != 'transparent' ){
          ctx.strokeStyle = color;
        }
        ctx.stroke();
      }
    }
  }
}

function imgClick( img_url ){
  var data = {
    type: 'image',
    originalContentUrl: base_url + img_url,
    previewImageUrl: base_url + img_url + '&att=thumbnail'
  };

  liff.sendMessages([
    data
  ]).then( () => {
    console.log( 'message sent' );
    liff.closeWindow();
  }).catch( ( err ) => {
    console.log( 'error', err );
  });
}
</script>
</body>
</html>
